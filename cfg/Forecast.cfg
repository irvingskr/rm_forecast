PACKAGE = "rm_forecast"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# select_bar = gen.enum([gen.const("Pass", int_t, 0, "Pass"),
#                        gen.const("Select", int_t, 1, "Select")], "type")
gen.add("max_match_distance", double_t, 0, "", 0.2, 0, 2)
gen.add("tracking_threshold", int_t, 0, "", 5, 0, 15)
gen.add("lost_threshold", int_t, 0, "", 5, 0, 15)

gen.add("max_jump_angle", double_t, 0, "", 0.2, 0, 2)
gen.add("max_jump_period", double_t, 0, "", 0.8, 0, 2)
gen.add("allow_following_range", double_t, 0, "", 0.3, 0, 2)

gen.add("forecast_readied", bool_t, 0, "", False)
gen.add("reset", bool_t, 0, "", False)
gen.add("min_target_quantity", int_t, 0, "", 200, 0, 1500)
gen.add("line_speed", double_t, 0, "", 0.8, 0, 2)
gen.add("z_c", double_t, 0, "", 0.6, 0, 2)
gen.add("outpost_radius", double_t, 0, "", 0.35, 0, 2)
gen.add("rotate_speed", double_t, 0, "", 0.5, 0, 2)
gen.add("y_thred", double_t, 0, "", 0.03, 0, 2)
gen.add("fly_time", double_t, 0, "", 500, 0, 1000)

gen.add("is_reproject", bool_t, 0, "", False)
gen.add("re_fly_time", double_t, 0, "", 0.4, 0, 2)

gen.add("delay_time", double_t, 0, "", 0.4, 0, 2)

# gen.add("is_filter_readied", bool_t, 0, "", False)
# gen.add("min_lw_ratio", double_t, 0, "", 2.4, 0, 4)

exit(gen.generate(PACKAGE, "rm_forecast", "Forecast"))